---
- name: check | Initialize
  set_fact:
   scale_hdfs_nodes_list: []
   scale_hdfs_namenodes_list: []
   scale_hdfs_datanodes_list: []
   scale_hdfs_cluster: []

- name: check | Collect all hdfs list
  set_fact:
   scale_hdfs_cluster: "{{ item }}"
  when: scale_hdfs_cluster|length == 0
  with_items:
   - "{{ scale_hdfs_clusters }}"
  delegate_to: localhost
  run_once: true

- name: check | Check if hdfs is enabled
  assert:
   that:
   - scale_protocols.hdfs|bool
   fail_msg: "HDFS is not enabled"

- name: check |  Check if HDFS required information has been supplied.
  assert:
   that:
   - scale_hdfs_cluster is defined
   - scale_hdfs_cluster| length > 0
   - scale_hdfs_cluster.name is defined
   - scale_hdfs_cluster.name| length > 0
   - scale_hdfs_cluster.filesystem is defined
   - scale_hdfs_cluster.filesystem| length > 0
   - scale_hdfs_cluster.namenodes is defined
   - scale_hdfs_cluster.namenodes| length > 0
   - scale_hdfs_cluster.datanodes is defined
   - scale_hdfs_cluster.datanodes| length > 0
   - scale_hdfs_cluster.datadir is defined
   - scale_hdfs_cluster.datadir| length > 0
   fail_msg: "HDFS required parameter information is not defined."
   success_msg: "HDFS required information is defined."
  run_once: true
  delegate_to: localhost

- name: check | Collect all HDFS NameNodes
  set_fact:
   scale_hdfs_namenodes_list: "{{ scale_hdfs_cluster.namenodes | unique }}"
  delegate_to: localhost
  run_once: true

- name: check | Collect all HDFS DataNodes
  set_fact:
   scale_hdfs_datanodes_list: "{{ scale_hdfs_cluster.datanodes | unique }}"
  delegate_to: localhost
  run_once: true

- name: check | Get HDFS nodes
  set_fact:
    scale_hdfs_nodes_list: "{{ scale_hdfs_namenodes_list + scale_hdfs_datanodes_list }}"

- name: check | make unique HDFS nodes
  set_fact:
    scale_hdfs_nodes_list: "{{ scale_hdfs_nodes_list | unique }}"

- name: check | Check if atleast one hdfs node is configured
  assert:
   that:
   - scale_hdfs_nodes_list|length > 0
   fail_msg: "No hdfs nodes configured"

- block:
   - name: check | Fetch JAVA_HOME path
     shell: echo $JAVA_HOME
     register: java_path
     when: ansible_fqdn in scale_hdfs_nodes_list

   - name: check | Check JAVA_HOME path exist
     stat:
       path: "{{ java_path.stdout }}"
     register: java_path_details
     when: ansible_fqdn in scale_hdfs_nodes_list

   - name: check | Assert JAVA_HOME path exist
     assert:
       that:
       - java_path_details.stat.exists
       fail_msg: The JAVA_HOME path does not exists !
     when: ansible_fqdn in scale_hdfs_nodes_list

   - name: check | Set path of JAVA_HOME
     set_fact:
       javahome_path: "{{ java_path.stdout }}"
     when:
       - ansible_fqdn in scale_hdfs_nodes_list

   - name: check | verify JAVA
     command: "ls {{ javahome_path }}/bin/java"
     register: jvm_list
     when: 
       - ansible_fqdn in scale_hdfs_nodes_list
       - javahome_path|length > 0

   - fail:
       msg: "JAVA_HOME not set properly"
     when: 
       - ansible_fqdn in scale_hdfs_nodes_list
       - jvm_list.rc != 0
- debug:
    msg: "HDFS Precheck ok"
  when: 
    - ansible_fqdn in scale_hdfs_nodes_list